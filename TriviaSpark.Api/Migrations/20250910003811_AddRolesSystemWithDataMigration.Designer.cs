// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TriviaSpark.Api.Data;

#nullable disable

namespace TriviaSpark.Api.Migrations
{
    [DbContext(typeof(TriviaSparkDbContext))]
    [Migration("20250910003811_AddRolesSystemWithDataMigration")]
    partial class AddRolesSystemWithDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AccessibilityInfo")
                        .HasColumnType("TEXT")
                        .HasColumnName("accessibility_info");

                    b.Property<string>("AgeRestrictions")
                        .HasColumnType("TEXT")
                        .HasColumnName("age_restrictions");

                    b.Property<bool>("AllowParticipants")
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_participants");

                    b.Property<string>("BackgroundImageUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("background_image_url");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("TEXT")
                        .HasColumnName("cancellation_policy");

                    b.Property<long?>("CompletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("completed_at");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT")
                        .HasColumnName("contact_phone");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DietaryAccommodations")
                        .HasColumnType("TEXT")
                        .HasColumnName("dietary_accommodations");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("difficulty");

                    b.Property<string>("DressCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("dress_code");

                    b.Property<string>("EventCopy")
                        .HasColumnType("TEXT")
                        .HasColumnName("event_copy");

                    b.Property<long?>("EventDate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_date");

                    b.Property<string>("EventRules")
                        .HasColumnType("TEXT")
                        .HasColumnName("event_rules");

                    b.Property<string>("EventTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("event_time");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_type");

                    b.Property<string>("FontFamily")
                        .HasColumnType("TEXT")
                        .HasColumnName("font_family");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("host_id");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("logo_url");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_participants");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("primary_color");

                    b.Property<string>("PrizeInformation")
                        .HasColumnType("TEXT")
                        .HasColumnName("prize_information");

                    b.Property<string>("QrCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("qr_code");

                    b.Property<string>("RefundPolicy")
                        .HasColumnType("TEXT")
                        .HasColumnName("refund_policy");

                    b.Property<long?>("RegistrationDeadline")
                        .HasColumnType("INTEGER")
                        .HasColumnName("registration_deadline");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("secondary_color");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT")
                        .HasColumnName("settings");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("TEXT")
                        .HasColumnName("social_links");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("TEXT")
                        .HasColumnName("special_instructions");

                    b.Property<string>("SponsorInformation")
                        .HasColumnType("TEXT")
                        .HasColumnName("sponsor_information");

                    b.Property<string>("SponsoringOrganization")
                        .HasColumnType("TEXT")
                        .HasColumnName("sponsoring_organization");

                    b.Property<long?>("StartedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("TechnicalRequirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("technical_requirements");

                    b.Property<string>("ThankYouMessage")
                        .HasColumnType("TEXT")
                        .HasColumnName("thank_you_message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("website_url");

                    b.Property<string>("WelcomeMessage")
                        .HasColumnType("TEXT")
                        .HasColumnName("welcome_message");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.EventImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AttributionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("attribution_text");

                    b.Property<string>("AttributionUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("attribution_url");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasColumnName("color");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool>("DownloadTracked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("download_tracked");

                    b.Property<string>("DownloadTrackingUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("download_tracking_url");

                    b.Property<string>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<string>("LastUsedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_used_at");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("question_id");

                    b.Property<string>("SearchContext")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("search_context");

                    b.Property<string>("SelectedByUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("selected_by_user_id");

                    b.Property<string>("SizeVariant")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("size_variant");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("UnsplashImageId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("unsplash_image_id");

                    b.Property<string>("UsageContext")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("usage_context");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DownloadTracked");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("SelectedByUserId");

                    b.HasIndex("UnsplashImageId");

                    b.ToTable("event_images", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.FunFact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_index");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("fun_facts", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Participant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("CanSwitchTeam")
                        .HasColumnType("INTEGER")
                        .HasColumnName("can_switch_team");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("JoinedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("joined_at");

                    b.Property<string>("LastActiveAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_active_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("ParticipantToken")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("participant_token");

                    b.Property<string>("TeamId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantToken")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("AiGenerated")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ai_generated");

                    b.Property<string>("BackgroundImageUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("background_image_url");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("correct_answer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("difficulty");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_id");

                    b.Property<string>("Explanation")
                        .HasColumnType("TEXT")
                        .HasColumnName("explanation");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("options");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_index");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnName("points");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("question");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("time_limit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Response", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("answer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_correct");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("participant_id");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnName("points");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("question_id");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("response_time");

                    b.Property<string>("SubmittedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("submitted_at");

                    b.Property<int?>("TimeRemaining")
                        .HasColumnType("INTEGER")
                        .HasColumnName("time_remaining");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("responses", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_id");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_members");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("TableNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("table_number");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Event", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.User", "Host")
                        .WithMany("Events")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.EventImage", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TriviaSpark.Api.Data.Entities.User", "SelectedBy")
                        .WithMany()
                        .HasForeignKey("SelectedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Question");

                    b.Navigation("SelectedBy");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.FunFact", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Event", "Event")
                        .WithMany("FunFacts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Participant", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TriviaSpark.Api.Data.Entities.Team", "Team")
                        .WithMany("Participants")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Question", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Event", "Event")
                        .WithMany("Questions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Response", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Participant", "Participant")
                        .WithMany("Responses")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TriviaSpark.Api.Data.Entities.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Team", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Event", "Event")
                        .WithMany("Teams")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.User", b =>
                {
                    b.HasOne("TriviaSpark.Api.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Event", b =>
                {
                    b.Navigation("FunFacts");

                    b.Navigation("Participants");

                    b.Navigation("Questions");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Participant", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Question", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.Team", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("TriviaSpark.Api.Data.Entities.User", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
